"""
üì§ FACEBOOK POSTING
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Facebook Graph API integration for posting.
"""

import requests
from typing import Dict, Optional
from ..config import FACEBOOK_PAGE_TOKEN, FACEBOOK_API_URL, REQUEST_TIMEOUT
from ..services.webhook_notifier import get_webhook_notifier


def post_to_facebook(post_data: Dict, image_url: Optional[str] = None) -> bool:
    """Post to Facebook with optional image attachment."""
    print(f"\nPosting to Facebook...")
    
    webhook = get_webhook_notifier()
    
    if "YOUR_FACEBOOK" in FACEBOOK_PAGE_TOKEN:
        print("   WARNING: Facebook token not configured")
        print(f"\n{'='*60}")
        print("GENERATED POST:")
        print(f"{'='*60}")
        print(post_data["post_text"])
        if image_url:
            print(f"\nIMAGE: {image_url}")
        print(f"\nGenerated by: {post_data['models_used']}")
        print(f"{'='*60}\n")
        
        # Notify webhook about test mode
        webhook.send_webhook("üß™ **Test Mode** - Post generated but not sent (no Facebook token)")
        return True
    
    # Choose posting method based on image availability
    if image_url:
        return _post_with_image(post_data, image_url)
    else:
        return _post_text_only(post_data)


def _post_with_image(post_data: Dict, image_url: str) -> bool:
    """Post with image attachment using Facebook Photos API."""
    webhook = get_webhook_notifier()
    
    try:
        # Method 1: Try photo upload with URL
        photo_url = FACEBOOK_API_URL.replace('/feed', '/photos')
        payload = {
            'url': image_url,
            'caption': post_data["post_text"],
            'access_token': FACEBOOK_PAGE_TOKEN
        }
        
        response = requests.post(photo_url, data=payload, timeout=REQUEST_TIMEOUT)
        
        if response.status_code == 200:
            result = response.json()
            print(f"   Posted with image! ID: {result.get('id')}")
            webhook.send_webhook(f"‚úÖ **Posted with image** - Facebook ID: {result.get('id')}")
            return True
        else:
            print(f"   Image upload failed ({response.status_code}), trying text-only...")
            webhook.send_webhook(f"‚ö†Ô∏è **Image upload failed** ({response.status_code}), trying text-only...")
            return _post_text_only(post_data)
            
    except Exception as e:
        print(f"   Image upload exception: {e}, trying text-only...")
        webhook.send_webhook(f"‚ö†Ô∏è **Image upload exception**: {str(e)}, trying text-only...")
        return _post_text_only(post_data)


def _post_text_only(post_data: Dict) -> bool:
    """Post text-only content."""
    webhook = get_webhook_notifier()
    
    payload = {
        'message': post_data["post_text"],
        'access_token': FACEBOOK_PAGE_TOKEN
    }
    
    try:
        response = requests.post(FACEBOOK_API_URL, data=payload, timeout=REQUEST_TIMEOUT)
        
        if response.status_code == 200:
            result = response.json()
            print(f"   Posted! ID: {result.get('id')}")
            webhook.send_webhook(f"‚úÖ **Posted successfully** - Facebook ID: {result.get('id')}")
            return True
        else:
            print(f"   Error: {response.status_code}")
            webhook.send_webhook(f"‚ùå **Post failed** - Error: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"   Exception: {e}")
        webhook.send_webhook(f"‚ùå **Post exception**: {str(e)}")
        return False
