"""
POST GENERATION
═══════════════════════════════════════════════════════════════
AI-powered Facebook post generation with two-stage process.
"""

import random
from typing import Optional, Dict
from ..ai.api import generate_text
from ..utils.text_utils import validate_post
from ..utils.image_extractor import get_best_image


def get_creative_post_styles() -> list:
    """Get different creative post styles for variety."""
    return [
        "HYPE_STYLE", "EMOTIONAL_STYLE", "MYSTERY_STYLE", "FAN_STYLE", 
        "BREAKING_STYLE", "NOSTALGIC_STYLE", "SHOCKING_STYLE"
    ]


def generate_facebook_post(article: Dict) -> Optional[Dict]:
    """Generate post using best available AI with emotional variety and image."""

    print(f"\nGenerating post: {article['title'][:60]}...")

    # Choose a random creative style for variety
    post_style = random.choice(get_creative_post_styles())
    
    # Stage 1: Enhanced Sentiment Analysis
    analysis_prompt = f"""
Analyze this anime news for a Facebook post:

Title: {article['title']}
Summary: {article['summary'][:500]}

Provide detailed analysis:
SENTIMENT: (exciting/sad/shocking/wholesome/funny/nostalgic/mysterious)
EMOTION_LEVEL: (low/medium/high/extreme)
KEY_POINTS: Top 3 most important facts (one line each)
AUTHENTICITY: official/rumor/unconfirmed/leaked
EMOJIS: 5-8 perfect emojis for this mood
TARGET_AUDIENCE: (casual_fans/hardcore_fans/general_anime_fans)
CREATIVE_ANGLE: (announcement/celebration/tribute/surprise/controversy)
"""
    
    analysis, analysis_model = generate_text(
        prompt=analysis_prompt,
        task_type="sentiment_analysis",
        temperature=0.4
    )
    
    if not analysis:
        print("   Analysis failed")
        return None
    
    print(f"   Analysis by: {analysis_model}")
    
    # Extract emotion for image selection
    emotion = "neutral"
    try:
        lines = analysis.strip().split('\n')
        for line in lines:
            if 'EMOTION:' in line:
                emotion = line.split(':')[1].strip().lower()
                break
    except:
        pass

    # Extract/find image for the article
    print("   Finding image...")
    image_url = get_best_image(article, emotion)
    
    # Stage 2: Creative Post Generation
    post_prompt = f"""
You are a VIRAL anime social media manager. Create an AMAZING Facebook post!

ANALYSIS:
{analysis}

ARTICLE:
Title: {article['title']}
Summary: {article['summary'][:400]}
Link: {article['link']}

POST STYLE: {post_style}

RULES - FOLLOW EXACTLY:
✅ Write like a REAL excited anime fan (NOT corporate!)
✅ 2-4 SHORT punchy sentences maximum
✅ Match the sentiment with emojis from analysis
✅ Add "(Official)" or "⚠️ Not confirmed" based on authenticity
✅ Make it EXCITING and emotional!
✅ End with: "Read more: [LINK]" on new line
✅ Add 4-6 trending hashtags with anime title
✅ Use the {post_style} approach for variety

STYLE GUIDELINES:
- HYPE_STYLE: Use CAPS, exclamation marks, "HOLY MOLY!", "THIS IS NOT A DRILL!"
- EMOTIONAL_STYLE: Focus on feelings, "My heart...", "I can't believe...", "Tears of joy"
- MYSTERY_STYLE: Build suspense, "What could this mean?", "The plot thickens..."
- FAN_STYLE: Personal connection, "As a fan of...", "We've been waiting..."
- BREAKING_STYLE: Urgent news tone, "BREAKING:", "Just in:", "Major update:"
- NOSTALGIC_STYLE: Reminisce, "Remember when...", "Takes me back to..."
- SHOCKING_STYLE: Surprise element, "Wait, what?!", "No way!", "This changes everything!"

❌ NO boring language
❌ NO more than 4 sentences
❌ NO robotic text

NOW CREATE THE POST (just the post, nothing else):
"""
    
    post_text, post_model = generate_text(
        prompt=post_prompt,
        task_type="creative_writing",
        temperature=0.85
    )
    
    if not post_text:
        print("   Generation failed")
        return None
    
    # Validate
    if not validate_post(post_text):
        print("   Failed validation, regenerating...")
        post_text, post_model = generate_text(
            prompt=post_prompt,
            task_type="creative_writing",
            temperature=0.9
        )
        if not post_text or not validate_post(post_text):
            return None
    
    print(f"   Generated by: {post_model}")

    return {
        "post_text": post_text,
        "article_hash": article["hash"],
        "image_url": image_url,
        "models_used": {
            "analysis": analysis_model,
            "generation": post_model
        }
    }